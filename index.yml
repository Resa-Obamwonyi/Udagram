# aws cloudformation create-stack --stack-name udagram-stack --template-body file://index.yml --parameters file://params.json  --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

AWSTemplateFormatVersion: 2010-09-09
Description: Resa / This template deploys the UDAGRAM Server setup
Parameters:
        EnvironmentName:
            Description: An environment name that will be prefixed to resource names
            Type: String
        
        VpcCIDR:
            Description: Please enter the IP range (CIDR notation) for this VPC
            Type: String
            Default: 10.0.0.0/16

        PublicSubnetOneCIDR:
            Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
            Type: String
            Default: 10.0.0.0/24

        PublicSubnetTwoCIDR:
            Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
            Type: String
            Default: 10.0.1.0/24

        PrivateSubnetOneCIDR:
            Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
            Type: String
            Default: 10.0.2.0/24

        PrivateSubnetTwoCIDR:
            Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
            Type: String
            Default: 10.0.3.0/24

        AMItoUse:
            Description: AMI to use for our base image
            Type: String

Resources:
        
        VPC:
            Type: AWS::EC2::VPC
            Properties:
                CidrBlock: !Ref VpcCIDR
                EnableDnsHostnames: true
                Tags: 
                    - Key: Name 
                      Value: !Ref EnvironmentName
        
        InternetGateway:
            Type: AWS::EC2::InternetGateway
            Properties:
                Tags:
                    - Key: Name
                      Value: !Ref EnvironmentName
        
        InternetGatewayAttachment:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
                InternetGatewayId: !Ref InternetGateway
                VpcId: !Ref VPC 

        PublicSubnetOne:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 0, !GetAZs '' ]
                CidrBlock: !Ref PublicSubnetOneCIDR
                MapPublicIpOnLaunch: true
                Tags:
                  - Key: Name 
                    Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

        PublicSubnetTwo:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 1, !GetAZs '' ]
                CidrBlock: !Ref PublicSubnetTwoCIDR
                MapPublicIpOnLaunch: true
                Tags:
                  - Key: Name 
                    Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
        
        PrivateSubnetOne:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [ 0, !GetAZs '' ]
                CidrBlock: !Ref PrivateSubnetOneCIDR
                MapPublicIpOnLaunch: false
                Tags:
                  - Key: Name 
                    Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
        
        PrivateSubnetTwo:
            Type: AWS::EC2::Subnet
            Properties:
                VpcId: !Ref VPC
                AvailabilityZone: !Select [1, !GetAZs '']
                CidrBlock: !Ref PrivateSubnetTwoCIDR
                MapPublicIpOnLaunch: false
                Tags:
                    - Key: Name
                      Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
        
        NatGateway1EIP:
            Type: AWS::EC2::EIP 
            DependsOn: InternetGatewayAttachment
            Properties: 
                Domain: vpc

        NatGateway2EIP:
            Type: AWS::EC2::EIP 
            DependsOn: InternetGatewayAttachment
            Properties: 
                Domain: vpc
        
        NatGateway1: 
            Type: AWS::EC2::NatGateway
            Properties: 
                AllocationId: !GetAtt NatGateway1EIP.AllocationId
                SubnetId: !Ref PublicSubnetOne

        NatGateway2: 
            Type: AWS::EC2::NatGateway
            Properties: 
                AllocationId: !GetAtt NatGateway2EIP.AllocationId
                SubnetId: !Ref PublicSubnetTwo
        
        PublicRouteTable:
          Type: AWS::EC2::RouteTable
          Properties: 
              VpcId: !Ref VPC
              Tags: 
                  - Key: Name 
                    Value: !Sub ${EnvironmentName} Public Routes

        DefaultPublicRoute: 
            Type: AWS::EC2::Route
            DependsOn: InternetGatewayAttachment
            Properties: 
                RouteTableId: !Ref PublicRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                GatewayId: !Ref InternetGateway

        PublicSubnet1RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PublicRouteTable
                SubnetId: !Ref PublicSubnetOne

        PublicSubnet2RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PublicRouteTable
                SubnetId: !Ref PublicSubnetTwo

        PrivateRouteTableOne:
          Type: AWS::EC2::RouteTable
          Properties: 
              VpcId: !Ref VPC
              Tags: 
                  - Key: Name 
                    Value: !Sub ${EnvironmentName} Private Route One
        
        DefaultPrivateRouteOne: 
            Type: AWS::EC2::Route
            Properties: 
                RouteTableId: !Ref PrivateRouteTableOne
                DestinationCidrBlock: 0.0.0.0/0
                NatGatewayId: !Ref NatGateway1

        PrivateSubnet1RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PrivateRouteTableOne
                SubnetId: !Ref PrivateSubnetOne

        PrivateRouteTableTwo:
            Type: AWS::EC2::RouteTable
            Properties: 
                VpcId: !Ref VPC
                Tags: 
                    - Key: Name 
                      Value: !Sub ${EnvironmentName} Private Route Two
        
        DefaultPrivateRouteTwo: 
            Type: AWS::EC2::Route
            Properties: 
                RouteTableId: !Ref PrivateRouteTableTwo
                DestinationCidrBlock: 0.0.0.0/0
                NatGatewayId: !Ref NatGateway2

        PrivateSubnet2RouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                RouteTableId: !Ref PrivateRouteTableTwo
                SubnetId: !Ref PrivateSubnetTwo
        
        LoadBalancerSecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: Allow http traffic to our load balancer
                VpcId: !Ref VPC
                SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                
                SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

        AppSecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: Allow http traffic to our load balancer
                VpcId: !Ref VPC
                SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                
                SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
        
        ServerOne:
            Type: AWS::EC2::Instance
            Properties:
                ImageId: !Ref AMItoUse
                InstanceType: t3.medium
                NetworkInterfaces: 
                    - AssociatePublicIpAddress: "false"
                      DeviceIndex: "0"
                      GroupSet: 
                        - Ref: "AppSecurityGroup"
                      SubnetId: 
                        Ref: "PrivateSubnetOne"
                UserData: 
                    Fn::Base64: !Sub |
                        #!/bin/bash
                        sudo yum update -y
                        sudo yum install -y httpd
                        sudo systemctl start httpd
                        sudo systemctl enable httpd

        ServerTwo:
            Type: AWS::EC2::Instance
            Properties:
                ImageId: !Ref AMItoUse
                InstanceType: t3.medium
                NetworkInterfaces: 
                    - AssociatePublicIpAddress: "false"
                      DeviceIndex: "0"
                      GroupSet: 
                        - Ref: "AppSecurityGroup"
                      SubnetId: 
                        Ref: "PrivateSubnetOne"
                UserData: 
                    Fn::Base64: !Sub |
                        #!/bin/bash
                        sudo yum update -y
                        sudo yum install -y httpd
                        sudo systemctl start httpd
                        sudo systemctl enable httpd
        
        ServerThree:
            Type: AWS::EC2::Instance
            Properties:
                ImageId: !Ref AMItoUse
                InstanceType: t3.medium
                NetworkInterfaces: 
                    - AssociatePublicIpAddress: "false"
                      DeviceIndex: "0"
                      GroupSet: 
                        - Ref: "AppSecurityGroup"
                      SubnetId: 
                        Ref: "PrivateSubnetTwo"
                UserData: 
                    Fn::Base64: !Sub |
                        #!/bin/bash
                        sudo yum update -y
                        sudo yum install -y httpd
                        sudo systemctl start httpd
                        sudo systemctl enable httpd

        ServerFour:
            Type: AWS::EC2::Instance
            Properties:
                ImageId: !Ref AMItoUse
                InstanceType: t3.medium
                NetworkInterfaces: 
                    - AssociatePublicIpAddress: "false"
                      DeviceIndex: "0"
                      GroupSet: 
                        - Ref: "AppSecurityGroup"
                      SubnetId: 
                        Ref: "PrivateSubnetTwo"
                UserData: 
                    Fn::Base64: !Sub |
                        #!/bin/bash
                        sudo yum update -y
                        sudo yum install -y httpd
                        sudo systemctl start httpd
                        sudo systemctl enable httpd

        LaunchConfigurationUD:
                Type: AWS::AutoScaling::LaunchConfiguration
                Properties:
                    UserData: # install and start the apache server on a linux/ubuntu machine
                        Fn::Base64: !Sub |
                            #!/bin/bash
                            sudo apt-get update -y
                            sudo apt-get install unzip awscli -y
                            sudo apt-get install apache2 -y
                            sudo systemctl start apache2.service
                            cd /var/www/html
                            echo "it works! Udagram, Udacity" > index.html
                    ImageId: !Ref AMItoUse #id of the machine you want to run, Ubuntu-18
                    SecurityGroups: 
                    - Ref: LoadBalancerSecurityGroup # security group
                    InstanceType: t3.medium
                    BlockDeviceMappings:
                    - DeviceName: "/dev/sdk"
                      Ebs:
                        VolumeSize: '10' # 10gb disk
            
        ApplicationLoadBalancer:
            Type: AWS::ElasticLoadBalancingV2::LoadBalancer
            Properties:
                Subnets:
                - !Ref PublicSubnetOne
                - !Ref PublicSubnetTwo
                SecurityGroups:
                - Ref: LoadBalancerSecurityGroup

        Listener:
            Type: AWS::ElasticLoadBalancingV2::Listener
            Properties:
                DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref AppTargetGroup
                LoadBalancerArn:
                    Ref: ApplicationLoadBalancer
                Port: '80'
                Protocol: HTTP

        ALBListenerRule:
            Type: AWS::ElasticLoadBalancingV2::ListenerRule
            Properties:
                Actions:
                - Type: forward
                  TargetGroupArn: !Ref AppTargetGroup
                Conditions:
                - Field: path-pattern
                  Values: [/]
                ListenerArn: !Ref 'Listener'
                Priority: 1
            
        AppTargetGroup:
            Type: AWS::ElasticLoadBalancingV2::TargetGroup
            Properties:
                HealthCheckIntervalSeconds: 30
                HealthCheckPath: /
                HealthCheckProtocol: HTTP
                HealthCheckTimeoutSeconds: 8
                HealthyThresholdCount: 2
                Port: 80
                Protocol: HTTP
                UnhealthyThresholdCount: 5
                VpcId: 
                    !Ref VPC

        AppAutoScalingGroup:
            Type: AWS::AutoScaling::AutoScalingGroup
            Properties:
                VPCZoneIdentifier:
                - Ref: PrivateSubnetOne
                - Ref: PrivateSubnetTwo
                LaunchConfigurationName:
                    Ref: LaunchConfigurationUD
                MinSize: '4'
                MaxSize: '6'
                TargetGroupARNs:
                - Ref: AppTargetGroup
        

Outputs: 

        VPC: 
            Description: A reference to the created VPC
            Value: !Ref VPC
            Export:
              Name: !Sub ${EnvironmentName}-VPCID

        PublicSubnetOne:
            Description: A reference to the first public subnet
            Value: !Ref PublicSubnetOne
            Export:
              Name: !Sub ${EnvironmentName}-PUB1-SN

        PublicSubnetTwo:
            Description: A reference to the second public subnet
            Value: !Ref PublicSubnetTwo
            Export:
              Name: !Sub ${EnvironmentName}-PUB2-SN

        PrivateSubnetOne:
            Description: A reference to the first private subnet
            Value: !Ref PrivateSubnetOne
            Export:
              Name: !Sub ${EnvironmentName}-PRI1-SN

        PrivateSubnetTwo:
            Description: A reference to the second private subnet
            Value: !Ref PrivateSubnetTwo
            Export:
              Name: !Sub ${EnvironmentName}-PRI2-SN

        LoadBalancerURL:
            Description: A reference to the loadbalancer URL
            Value: 
              Fn::Join: [ "", [ "http://", !GetAtt ApplicationLoadBalancer.DNSName  ] ]
            Export:
              Name: !Sub ${EnvironmentName}-LB
